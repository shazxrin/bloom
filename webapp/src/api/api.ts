/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateCategoryDto
 */
export interface CreateCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCategoryDto
     */
    'color': string;
}
/**
 * 
 * @export
 * @interface CreateCurrentTaskDto
 */
export interface CreateCurrentTaskDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCurrentTaskDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCurrentTaskDto
     */
    'categoryId': string;
    /**
     * 
     * @type {number}
     * @memberof CreateCurrentTaskDto
     */
    'duration': number;
}
/**
 * 
 * @export
 * @interface CurrentTaskDto
 */
export interface CurrentTaskDto {
    /**
     * 
     * @type {string}
     * @memberof CurrentTaskDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentTaskDto
     */
    'categoryId': string;
    /**
     * 
     * @type {number}
     * @memberof CurrentTaskDto
     */
    'duration': number;
    /**
     * 
     * @type {number}
     * @memberof CurrentTaskDto
     */
    'remainingDuration': number;
    /**
     * 
     * @type {boolean}
     * @memberof CurrentTaskDto
     */
    'isPaused': boolean;
    /**
     * 
     * @type {string}
     * @memberof CurrentTaskDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof CurrentTaskDto
     */
    'lastStartTime': string;
}
/**
 * 
 * @export
 * @interface ListCategoryDto
 */
export interface ListCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof ListCategoryDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ListCategoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ListCategoryDto
     */
    'color': string;
}
/**
 * 
 * @export
 * @interface ListTaskDto
 */
export interface ListTaskDto {
    /**
     * 
     * @type {string}
     * @memberof ListTaskDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ListTaskDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ListTaskDto
     */
    'categoryId': string;
    /**
     * 
     * @type {number}
     * @memberof ListTaskDto
     */
    'duration': number;
    /**
     * 
     * @type {string}
     * @memberof ListTaskDto
     */
    'startTime': string;
    /**
     * 
     * @type {string}
     * @memberof ListTaskDto
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface ProblemDetail
 */
export interface ProblemDetail {
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'type'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'title'?: string;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetail
     */
    'status'?: number;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'detail'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetail
     */
    'instance'?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof ProblemDetail
     */
    'properties'?: { [key: string]: object; };
}
/**
 * 
 * @export
 * @interface UpdateCategoryDto
 */
export interface UpdateCategoryDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateCategoryDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UpdateCategoryDto
     */
    'color': string;
}

/**
 * CategoryControllerApi - axios parameter creator
 * @export
 */
export const CategoryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteCategory', 'id', id)
            const localVarPath = `/api/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/categories/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCategoryDto} updateCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUpdateCategory: async (id: string, updateCategoryDto: UpdateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchUpdateCategory', 'id', id)
            // verify required parameter 'updateCategoryDto' is not null or undefined
            assertParamExists('patchUpdateCategory', 'updateCategoryDto', updateCategoryDto)
            const localVarPath = `/api/categories/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateCategory: async (createCategoryDto: CreateCategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCategoryDto' is not null or undefined
            assertParamExists('postCreateCategory', 'createCategoryDto', createCategoryDto)
            const localVarPath = `/api/categories`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCategoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CategoryControllerApi - functional programming interface
 * @export
 */
export const CategoryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CategoryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListCategoryDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateCategoryDto} updateCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUpdateCategory(id: string, updateCategoryDto: UpdateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUpdateCategory(id, updateCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCategoryDto} createCategoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateCategory(createCategoryDto: CreateCategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateCategory(createCategoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CategoryControllerApi - factory interface
 * @export
 */
export const CategoryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CategoryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CategoryControllerApiDeleteCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(requestParameters: CategoryControllerApiDeleteCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteCategory(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllCategories(options?: AxiosRequestConfig): AxiosPromise<Array<ListCategoryDto>> {
            return localVarFp.getAllCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryControllerApiPatchUpdateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUpdateCategory(requestParameters: CategoryControllerApiPatchUpdateCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.patchUpdateCategory(requestParameters.id, requestParameters.updateCategoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CategoryControllerApiPostCreateCategoryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateCategory(requestParameters: CategoryControllerApiPostCreateCategoryRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postCreateCategory(requestParameters.createCategoryDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteCategory operation in CategoryControllerApi.
 * @export
 * @interface CategoryControllerApiDeleteCategoryRequest
 */
export interface CategoryControllerApiDeleteCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof CategoryControllerApiDeleteCategory
     */
    readonly id: string
}

/**
 * Request parameters for patchUpdateCategory operation in CategoryControllerApi.
 * @export
 * @interface CategoryControllerApiPatchUpdateCategoryRequest
 */
export interface CategoryControllerApiPatchUpdateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof CategoryControllerApiPatchUpdateCategory
     */
    readonly id: string

    /**
     * 
     * @type {UpdateCategoryDto}
     * @memberof CategoryControllerApiPatchUpdateCategory
     */
    readonly updateCategoryDto: UpdateCategoryDto
}

/**
 * Request parameters for postCreateCategory operation in CategoryControllerApi.
 * @export
 * @interface CategoryControllerApiPostCreateCategoryRequest
 */
export interface CategoryControllerApiPostCreateCategoryRequest {
    /**
     * 
     * @type {CreateCategoryDto}
     * @memberof CategoryControllerApiPostCreateCategory
     */
    readonly createCategoryDto: CreateCategoryDto
}

/**
 * CategoryControllerApi - object-oriented interface
 * @export
 * @class CategoryControllerApi
 * @extends {BaseAPI}
 */
export class CategoryControllerApi extends BaseAPI {
    /**
     * 
     * @param {CategoryControllerApiDeleteCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public deleteCategory(requestParameters: CategoryControllerApiDeleteCategoryRequest, options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).deleteCategory(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public getAllCategories(options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).getAllCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryControllerApiPatchUpdateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public patchUpdateCategory(requestParameters: CategoryControllerApiPatchUpdateCategoryRequest, options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).patchUpdateCategory(requestParameters.id, requestParameters.updateCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CategoryControllerApiPostCreateCategoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CategoryControllerApi
     */
    public postCreateCategory(requestParameters: CategoryControllerApiPostCreateCategoryRequest, options?: AxiosRequestConfig) {
        return CategoryControllerApiFp(this.configuration).postCreateCategory(requestParameters.createCategoryDto, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TaskControllerApi - axios parameter creator
 * @export
 */
export const TaskControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTasks: async (categoryId?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (categoryId !== undefined) {
                localVarQueryParameter['categoryId'] = categoryId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentTask: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/current`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CreateCurrentTaskDto} createCurrentTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateCurrentTask: async (createCurrentTaskDto: CreateCurrentTaskDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCurrentTaskDto' is not null or undefined
            assertParamExists('postCreateCurrentTask', 'createCurrentTaskDto', createCurrentTaskDto)
            const localVarPath = `/api/tasks/current/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCurrentTaskDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEndCurrentTask: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/current/end`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPauseCurrentTask: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/current/pause`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResumeCurrentTask: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks/current/resume`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TaskControllerApi - functional programming interface
 * @export
 */
export const TaskControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TaskControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [categoryId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAllTasks(categoryId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListTaskDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAllTasks(categoryId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrentTask(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CurrentTaskDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrentTask(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {CreateCurrentTaskDto} createCurrentTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postCreateCurrentTask(createCurrentTaskDto: CreateCurrentTaskDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postCreateCurrentTask(createCurrentTaskDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postEndCurrentTask(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postEndCurrentTask(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPauseCurrentTask(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postPauseCurrentTask(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postResumeCurrentTask(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postResumeCurrentTask(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TaskControllerApi - factory interface
 * @export
 */
export const TaskControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TaskControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {TaskControllerApiGetAllTasksRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAllTasks(requestParameters: TaskControllerApiGetAllTasksRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<ListTaskDto>> {
            return localVarFp.getAllTasks(requestParameters.categoryId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrentTask(options?: AxiosRequestConfig): AxiosPromise<CurrentTaskDto> {
            return localVarFp.getCurrentTask(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {TaskControllerApiPostCreateCurrentTaskRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postCreateCurrentTask(requestParameters: TaskControllerApiPostCreateCurrentTaskRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postCreateCurrentTask(requestParameters.createCurrentTaskDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postEndCurrentTask(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postEndCurrentTask(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPauseCurrentTask(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postPauseCurrentTask(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postResumeCurrentTask(options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.postResumeCurrentTask(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAllTasks operation in TaskControllerApi.
 * @export
 * @interface TaskControllerApiGetAllTasksRequest
 */
export interface TaskControllerApiGetAllTasksRequest {
    /**
     * 
     * @type {string}
     * @memberof TaskControllerApiGetAllTasks
     */
    readonly categoryId?: string
}

/**
 * Request parameters for postCreateCurrentTask operation in TaskControllerApi.
 * @export
 * @interface TaskControllerApiPostCreateCurrentTaskRequest
 */
export interface TaskControllerApiPostCreateCurrentTaskRequest {
    /**
     * 
     * @type {CreateCurrentTaskDto}
     * @memberof TaskControllerApiPostCreateCurrentTask
     */
    readonly createCurrentTaskDto: CreateCurrentTaskDto
}

/**
 * TaskControllerApi - object-oriented interface
 * @export
 * @class TaskControllerApi
 * @extends {BaseAPI}
 */
export class TaskControllerApi extends BaseAPI {
    /**
     * 
     * @param {TaskControllerApiGetAllTasksRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public getAllTasks(requestParameters: TaskControllerApiGetAllTasksRequest = {}, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).getAllTasks(requestParameters.categoryId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public getCurrentTask(options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).getCurrentTask(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {TaskControllerApiPostCreateCurrentTaskRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public postCreateCurrentTask(requestParameters: TaskControllerApiPostCreateCurrentTaskRequest, options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).postCreateCurrentTask(requestParameters.createCurrentTaskDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public postEndCurrentTask(options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).postEndCurrentTask(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public postPauseCurrentTask(options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).postPauseCurrentTask(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TaskControllerApi
     */
    public postResumeCurrentTask(options?: AxiosRequestConfig) {
        return TaskControllerApiFp(this.configuration).postResumeCurrentTask(options).then((request) => request(this.axios, this.basePath));
    }
}


